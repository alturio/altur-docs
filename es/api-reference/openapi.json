{
  "openapi": "3.0.1",
  "info": {
    "title": "Altur API",
    "description": "An API aimed to allow third-party developers to interact with the Altur platform through a RESTful interface.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.altur.io/api/v1.0"
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "paths": {
    "/campaigns": {
      "get": {
        "description": "Returns all Campaigns for your organization",
        "parameters": [
          {
            "name": "agent_id",
            "in": "query",
            "description": "Agent ID",
            "type": "string",
            "required": false
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status",
            "type": "string",
            "required": false
          },
          {
            "name": "integration",
            "in": "query",
            "description": "Type of integration for the Campaign",
            "type": "string",
            "enum": [
              "phone_call",
              "whatsapp"
            ],
            "required": false
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Bottom date of the range to filter the Campaigns in ISO 8601 format",
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Top date of the range to filter the Campaigns in ISO 8601 format",
            "type": "string",
            "required": false
          },
          {
            "name": "archived",
            "in": "query",
            "description": "If true, archived Campaigns will be included in the results.",
            "type": "boolean",
            "default": false,
            "required": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page to return.",
            "type": "integer",
            "default": 25,
            "maximum": 100,
            "required": false
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor to the next page to return.",
            "type": "string",
            "required": false
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Direction of the cursor to return the results in.",
            "type": "string",
            "enum": [
              "next",
              "previous"
            ],
            "default": "next",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Campaigns response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{id}/contacts": {
      "get": {
        "description": "Returns the Campaign Contacts corresponding to the given indentifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Campaign to return the Contacts",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the Campaign Contacts",
            "type": "string",
            "required": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page to return.",
            "type": "integer",
            "default": 25,
            "maximum": 100,
            "required": false
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor to the next page to return.",
            "type": "string",
            "required": false
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Direction of the cursor to return the results in.",
            "type": "string",
            "enum": [
              "next",
              "previous"
            ],
            "default": "next",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign Contacts response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignContactsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/enduser": {
      "post": {
        "description": "Create new EndUser for your organization",
        "requestBody": {
          "description": "EndUser to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndUserData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "EndUser created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUser"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/enduser/{id}": {
      "get": {
        "description": "Returns the EndUser corresponding to the given indentifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the EndUser to return",
            "schema": {
              "type": "string",
              "format": "uuid4"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "EndUser response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUser"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates the details of an EndUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the EndUser to update",
            "schema": {
              "type": "string",
              "format": "uuid4"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "EndUser object that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndUserData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "EndUser updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUser"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "EndUser not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes an EndUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the EndUser to delete",
            "schema": {
              "type": "string",
              "format": "uuid4"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "EndUser deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "EndUser not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/thread/{id}": {
      "get": {
        "description": "Returns the Thread corresponding to the given indentifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Thread to return",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Thread response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/message": {
      "post": {
        "description": "Sends Message to the Thread between a Chatbot and an EndUser, returns the Message created from the request, the Messages generated in response, and returns information about the Thread between the Chatbot and EndUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chatbot_id": {
                    "description": "Unique identifier of the Chatbot recieving the Message",
                    "type": "string",
                    "format": "uuid4"
                  },
                  "end_user_id": {
                    "description": "Unique identifier of the EndUser sending the Message",
                    "type": "string",
                    "format": "uuid4"
                  },
                  "content": {
                    "description": "Text content of the Message",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thread response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Chatbot or EndUser not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/message/{thread_id}": {
      "get": {
        "description": "Get a all Messages in a Thread, ordered from oldest to most recently sent",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The identifier of the Thread to fetch",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array containing all Messages in the Thread",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Thread not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/call": {
      "post": {
        "description": "Starts a Call",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agent_id": {
                    "description": "Unique identifier of the Agent that will participate in the Call (formerly Chatbot or Assistant)",
                    "type": "string",
                    "format": "uuid4"
                  },
                  "phone_number_to": {
                    "description": "E.164 formatted phone number of the EndUser to call",
                    "type": "string",
                    "format": "e164"
                  },
                  "end_user_display_name": {
                    "description": "Display name of the EndUser to call",
                    "type": "string"
                  },
                  "end_user_context": {
                    "description": "Context of the EndUser to call",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object"
                      }
                    ]
                  },
                  "initial_message": {
                    "description": "Initial message the Agent will say upon the call being answered",
                    "type": "string"
                  }
                },
                "required": [
                  "agent_id",
                  "phone_number_to"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Call response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/call/{id}": {
      "get": {
        "description": "Returns the Call corresponding to the given indentifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Call to return",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Call response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Call not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/call/{id}/recording": {
      "get": {
        "description": "Access the recording of a Call in form of a file stream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Call to fetch",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "File stream of the Call recording",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Call not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Campaign": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the Campaign",
            "type": "integer"
          },
          "name": {
            "description": "Name of the Campaign",
            "type": "string"
          },
          "description": {
            "description": "Description of the Campaign",
            "type": "string"
          },
          "status": {
            "description": "Status of the Campaign",
            "type": "string"
          },
          "created_at": {
            "description": "Datetime from when the Campaign was created",
            "type": "string",
            "format": "ISO 8601"
          },
          "agent": {
            "description": "Agent of the Campaign",
            "type": "string"
          },
          "scheduling": {
            "description": "Schedule of the Campaign",
            "type": "object",
            "$ref": "#/components/schemas/CampaignSchedule"
          },
          "timezone": {
            "description": "Timezone of the Campaign",
            "type": "string"
          },
          "retries": {
            "description": "Retries of the Campaign",
            "type": "integer"
          },
          "concurrency": {
            "description": "Concurrency of the Campaign",
            "type": "integer"
          },
          "archived": {
            "description": "Whether the Campaign is archived",
            "type": "boolean"
          },
          "template": {
            "description": "Template of the Campaign",
            "type": "string"
          },
          "first_message": {
            "description": "First message of the Campaign",
            "type": "string"
          },
          "cycle_enabled": {
            "description": "Whether the Campaign is cycle enabled",
            "type": "boolean"
          },
          "cycle_max_iterations": {
            "description": "Max iterations of the Campaign",
            "type": "integer"
          },
          "cycle_cooldown": {
            "description": "Cooldown of the Campaign in minutes",
            "type": "integer"
          },
          "cycle_status_filters": {
            "description": "Status filters of the Campaign",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cycle_tag_filters": {
            "description": "Tag filters of the Campaign",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cycle_current_iteration": {
            "description": "Current iteration of the Campaign",
            "type": "integer"
          },
          "last_iteration_at": {
            "description": "Last iteration of the Campaign",
            "type": "string",
            "format": "ISO 8601"
          }
        }
      },
      "CampaignScheduleDay":{
        "type": "object",
        "properties": {
          "startTime": {
            "description": "Start time of the Campaign on Monday",
            "type": "string",
            "format": "ISO 8601"
          },
          "endTime": {
            "description": "End time of the Campaign on Monday",
            "type": "string",
            "format": "ISO 8601"
          },
          "active": {
            "description": "Boolean describing if the Campaign is active on Monday",
            "type": "boolean"
          }
        }
      },
      "CampaignSchedule":{
        "type": "object",
        "properties": {
          "mon": {
            "description": "Monday",
            "type": "object",
            "$ref": "#/components/schemas/CampaignScheduleDay"
          },
          "tue": {
            "description": "Tuesday",
            "type": "object",
            "$ref": "#/components/schemas/CampaignScheduleDay"
          },
          "wed": {
            "description": "Wednesday",
            "type": "object",
            "$ref": "#/components/schemas/CampaignScheduleDay"
          },
          "thu": {
            "description": "Thursday",
            "type": "object",
            "$ref": "#/components/schemas/CampaignScheduleDay"
          },
          "fri": {
            "description": "Friday",
            "type": "object",
            "$ref": "#/components/schemas/CampaignScheduleDay"
          },
          "sat": {
            "description": "Saturday",
            "type": "object",
            "$ref": "#/components/schemas/CampaignScheduleDay"
          },
          "sun": {
            "description": "Sunday",
            "type": "object",
            "$ref": "#/components/schemas/CampaignScheduleDay"
          }
        }
      },
      "CampaignsResponse": {
        "type": "object",
        "properties": {
          "total_count": {
            "description": "Total number of Campaigns",
            "type": "integer"
          },
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Campaign"
            }
          },
          "pagination": {
            "type": "object",
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "CampaignContactsResponse": {
        "type": "object",
        "properties": {
          "total_count": {
            "description": "Total number of Campaign Contacts",
            "type": "integer"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignContact"
            }
          },
          "pagination": {
            "type": "object",
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "EndUser": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the EndUser",
            "type": "string",
            "format": "uuid4"
          },
          "display_name": {
            "description": "EndUser's display name",
            "type": "string"
          },
          "integration_type": {
            "description": "Enum representing the Integration's channel",
            "type": "string",
            "enum": [
              "api",
              "whatsapp"
            ]
          },
          "info": {
            "description": "EndUser's information valuable for interactions with Chatbots or human agents",
            "type": "string"
          }
        },
        "required": [
          "id",
          "display_name",
          "integration"
        ]
      },
      "EndUserData": {
        "type": "object",
        "properties": {
          "display_name": {
            "description": "EndUser's display name",
            "type": "string"
          },
          "info": {
            "description": "EndUser's information valuable for interactions with chatbots or human agents",
            "type": "string"
          }
        }
      },
      "Chatbot": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the Chatbot",
            "type": "string",
            "format": "uuid4"
          },
          "name": {
            "description": "Name given to the Chatbot",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Integration": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the Integration",
            "type": "string"
          },
          "type": {
            "description": "Enum representing the Integration's channel",
            "type": "string",
            "enum": [
              "api",
              "whatsapp"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the Tag",
            "type": "string"
          },
          "name": {
            "description": "Name given to the Tag",
            "type": "string"
          },
          "color": {
            "description": "Color used for in-app display of Tag",
            "type": "string",
            "enum": [
              "blue",
              "green",
              "red",
              "pink",
              "purple",
              "orange",
              "yellow"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "color"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the User",
            "type": "string"
          },
          "email": {
            "description": "User's email address",
            "type": "string"
          },
          "first_name": {
            "description": "User's first name",
            "type": "string"
          },
          "last_name": {
            "description": "User's last name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "email"
        ]
      },
      "Thread": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the Thread",
            "type": "string"
          },
          "chatbot": {
            "$ref": "#/components/schemas/Chatbot"
          },
          "end_user": {
            "$ref": "#/components/schemas/EndUser"
          },
          "integration": {
            "$ref": "#/components/schemas/Integration"
          },
          "updated_at": {
            "description": "Last time the Thread was updated",
            "type": "string",
            "format": "date-time"
          },
          "active": {
            "description": "Boolean describing if automatic responses by the Chatbot are active on this Thread",
            "type": "boolean"
          },
          "blocked": {
            "description": "Boolean describing if Thread is blocked",
            "type": "boolean"
          },
          "tags": {
            "description": "Tags assigned to Thread",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "assigned_to": {
            "description": "Users assigned to Thread",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "Call": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the Call",
            "type": "string"
          },
          "thread": {
            "$ref": "#/components/schemas/Thread"
          },
          "type": {
            "description": "Type of the Call",
            "type": "string",
            "enum": [
              "inbound",
              "outbound"
            ]
          },
          "status": {
            "description": "Status of the Call",
            "type": "string",
            "enum": [
              "created",
              "queued",
              "ringing",
              "in-progress",
              "forwarding",
              "ended",
              "busy",
              "no-answer",
              "failed"
            ]
          },
          "answered_by": {
            "description": "Who or what answered the Call",
            "type": "string",
            "enum": [
              "human",
              "machine",
              "unknown"
            ]
          },
          "created_at": {
            "description": "Datetime from when the Call was created",
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "description": "Datetime from when the Call was started",
            "type": "string",
            "format": "date-time"
          },
          "ended_at": {
            "description": "Datetime from when the Call was ended",
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "description": "Duration of the Call in seconds",
            "type": "integer"
          },
          "billable_duration": {
            "description": "Billable duration of the Call in seconds",
            "type": "integer"
          }
        }
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "thread": {
            "$ref": "#/components/schemas/Thread"
          },
          "messages": {
            "description": "Array of Messages in response to prompted Message",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "in_response_to": {
            "$ref": "#/components/schemas/Message"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "thread_id": {
            "description": "Unique identifier of the Thread the Message belongs to",
            "type": "string"
          },
          "type": {
            "description": "Message type enum",
            "type": "string",
            "enum": [
              "text",
              "image",
              "audio",
              "video",
              "button",
              "template",
              "document"
            ]
          },
          "content": {
            "description": "Message's text content",
            "type": "string"
          },
          "media": {
            "description": "Message's media content, if any (usually in form of URL)",
            "type": "string"
          },
          "sent_by": {
            "description": "Author of this message",
            "type": "string",
            "enum": [
              "AI",
              "EU",
              "SYS"
            ]
          },
          "sent_by_user": {
            "description": "Altur user id (if Message was sent manually by an in-app user)",
            "type": "string"
          },
          "sent_at": {
            "description": "Datetime from when the Message was sent",
            "type": "string",
            "format": "date-time"
          },
          "read": {
            "description": "Boolean describing if the Message is considered as read",
            "type": "boolean"
          }
        },
        "required": [
          "thread_id",
          "type",
          "sent_by",
          "sent_at"
        ]
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ResponseMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "CampaignContact": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the Campaign Contact",
            "type": "integer"
          },
          "campaign_id": {
            "description": "ID of the associated Campaign",
            "type": "integer"
          },
          "phone_number": {
            "description": "Phone number of the contact",
            "type": "string"
          },
          "status": {
            "description": "Status of the Campaign Contact",
            "type": "string"
          },
          "created_at": {
            "description": "Datetime when the Campaign Contact was created",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "Datetime when the Campaign Contact was last updated",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "has_more": {
            "type": "boolean",
            "description": "Boolean describing if there are more items to fetch"
          },
          "has_previous": {
            "type": "boolean",
            "description": "Boolean describing if there are previous items to fetch"
          },
          "next_cursor": {
            "type": "string",
            "description": "Cursor to the next page to return"
          },
          "previous_cursor": {
            "type": "string",
            "description": "Cursor to the previous page to return"
          }
        }
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Add `api-key YOUR_API_SECRET_KEY` as the value of the `Authorization` header."
      }
    }
  }
}